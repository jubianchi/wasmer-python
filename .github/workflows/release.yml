name: Release

on:
  push:
    tags:
      - '**'

jobs:
  build:
    name: Build

    strategy:
      matrix:
        target:
          - id: 'linux-amd64'
            os: 'ubuntu-18.04'
            rust-target: 'x86_64-unknown-linux-gnu'
            rust-toolchain: 'stable'
            llvm_archive_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/linux-amd64.tar.gz'
          - id: 'darwin-amd64'
            os: 'macos-latest'
            rust-target: 'x86_64-apple-darwin'
            rust-toolchain: 'stable'
            llvm_archive_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/darwin-amd64.tar.gz'
        python: [ 3.5, 3.6, 3.7, 3.8, 3.9 ]
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.target.rust-toolchain }}
          default: true
          override: true
          target: ${{ matrix.target.rust-target }}

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.target.id }}-${{ matrix.python }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo bin
        uses: actions/cache@v1
        with:
          path: ~/.cargo/bin
          key: ${{ matrix.target.id }}-${{ matrix.python }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.target.id }}-${{ matrix.python }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Fake `pyenv` installation
        shell: bash
        run: |
          echo "${{ matrix.python }}" > .python-version

      - name: Set up LLVM for `wasmer_compiler_llvm`
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL ${{ matrix.target.llvm_archive_url }} -o llvm.tar.gz
          mkdir -p ${{ env.LLVM_DIR }}
          tar xzvf llvm.tar.gz -C ${{ env.LLVM_DIR }}
          echo ${{ env.LLVM_DIR }}/bin >> $GITHUB_PATH
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm

      - name: Set up utilities
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/$(cat .python-version)/bin:$PATH"
          test -f $HOME/.cargo/bin/just || cargo install just

      - name: Prelude
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/$(cat .python-version)/bin:$PATH"
          just prelude

      - name: Compile the library
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/$(cat .python-version)/bin:$PATH"
          if test -d .env/bin/; then source .env/bin/activate; else source .env/Scripts/activate; fi
          maturin list-python
          PYTHON_INTERPRETER=$(maturin list-python | grep -o "CPython $(cat .python-version | grep -o -E '^[^\.]+\.[^\.]+').* at .*" | cut -d' ' -f 4 | tr '\\' '/')
          echo "Selected interpreter: ${PYTHON_INTERPRETER}"
          just build-all "${{ matrix.target.rust-target }}"
          just build-any-wheel

      - name: Build the wheels
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/$(cat .python-version)/bin:$PATH"
          if test -d .env/bin/; then source .env/bin/activate; else source .env/Scripts/activate; fi
          maturin list-python
          PYTHON_INTERPRETER=$(maturin list-python | grep -o "CPython $(cat .python-version | grep -o -E '^[^\.]+\.[^\.]+').* at .*" | cut -d' ' -f 4 | tr '\\' '/')
          echo "Selected interpreter: ${PYTHON_INTERPRETER}"
          just build-all-wheels "${PYTHON_INTERPRETER}" "${{ matrix.target.rust-target }}"

      - name: Inspect wheels
        shell: bash
        run: |
          ls -lhaGiR target/wheels/*.whl

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.python }}-${{ matrix.target.id }}
          path: target/wheels
          if-no-files-found: error

  release:
    name: Release

    runs-on: ubuntu-18.04

    needs: [build]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Inspect artifacts
        id: inspect_artifacts
        shell: bash
        run: |
          ls -lhaGiR artifacts/*

          for wheel in $(ls artifacts/wheels-*/*.whl)
          do
              echo -e "${wheel}\t$(basename ${wheel})\tapplication/x-pywheel+zip"
          done | tee wheels
          echo ::set-output name=wheels::wheels

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Fake `pyenv` installation
        shell: bash
        run: |
          echo "3.9" > .python-version

      - name: Set up just
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/3.9/bin:$PATH"
          test -f $HOME/.cargo/bin/just || cargo install just

      - name: Prelude
        shell: bash
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/3.9/bin:$PATH"
          just prelude

      - name: Publish the wheels on PyPI
        shell: bash
        env:
          TWINE_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: |
          export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          export PATH="$HOME/.pyenv/versions/3.9/bin:$PATH"
          if test -d .env/bin/; then source .env/bin/activate; else source .env/Scripts/activate; fi
          just publish pypi artifacts/wheels-*/*.whl

      - name: Create the release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            Python Packages:
            - [`wasmer`](https://pypi.org/project/wasmer/)
            - [`wasmer-compiler-cranelift`](https://pypi.org/project/wasmer-compiler-cranelift/)
            - [`wasmer-compiler-llvm`](https://pypi.org/project/wasmer-compiler-llvm/)
            - [`wasmer-compiler-singlepass`](https://pypi.org/project/wasmer-compiler-singlepass/)

      - name: Upload the wheels as Github release assets
        uses: Hywan/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          assets_from_file: ${{ steps.inspect_artifacts.outputs.wheels }}
